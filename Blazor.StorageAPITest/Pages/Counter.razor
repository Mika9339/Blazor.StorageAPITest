@inject IndexedDBManager DbManager
@inject IJSRuntime JS
@page "/counter"
@using TG.Blazor.IndexedDB


<p>@StorageQuoate MB</p>

<p>Datensatz suchen GUID</p>
<InputText @bind-Value="SearchID"></InputText>
<button disabled="@(string.IsNullOrEmpty(SearchID))" class="btn btn-primary" @onclick="IncrementCount">Datensatz suchen</button>

<p>Image input</p>
<InputFile OnChange="@LoadFiles" />
<button disabled="@(file == null)" class="btn btn-primary" @onclick="AddRows">Datensätze hinzufügen</button>

<p>Log</p>
<p role="status">@message</p>





<br />
<p>Suchergebnis:</p>
@if (SearchedPerson != null)
{
    <p>@SearchedPerson.LastName</p>
    <p>@SearchedPerson.FirstName</p>
    <p>@SearchedPerson.Id</p>
}


@code {
    public long StorageQuoate { get; set; } = -1;

    public Person? SearchedPerson { get; set; }

    public string SearchID { get; set; } = "001a1f3f-ee72-4347-b2c9-747e29823faa";
    IBrowserFile? file;
    private MarkupString message;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AddLine("start get one");
            SearchedPerson = await DbManager.GetRecordById<Guid, Person>("Employees", Guid.Parse(SearchID));
            AddLine("end get one");

            StorageQuoate = await JS.InvokeAsync<long>("storageQuota");

            StateHasChanged();
        }
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;

    }

    private void AddLine(string msg)
    {
        message = new MarkupString(message + msg + " " + DateTime.Now.ToString() + "<br/>");
    }


    private async void AddRows()
    {
        if (file == null)
            return;

        using MemoryStream ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);

        AddLine("start");
        StateHasChanged();
        for (int i = 0; i < 100000; i++)
        {
            var newRecord = new StoreRecord<Person>
                {
                    Storename = "Employees",
                    Data = new Person()
                    {
                        Id = Guid.NewGuid(),
                        FirstName = $"Firstname {i}",
                        LastName = $"Lastname {i}",
                        Img = ms.ToArray()
                    }
                };

            await DbManager.AddRecord(newRecord);
            // AddLine($"add {i}");
            StateHasChanged();

        }

        AddLine("added");
        StateHasChanged();



        // var persons = await DbManager.GetRecords<Person>("Employees");
        // AddLine("get all");
        // StateHasChanged();
    }

    private async void IncrementCount()
    {
        // using MemoryStream ms = new MemoryStream();
        // await file.OpenReadStream().CopyToAsync(ms);

        // AddLine("start");
        // StateHasChanged();
        // for (int i = 0; i < 100000; i++)
        // {


        //     var newRecord = new StoreRecord<Person>
        //         {
        //             Storename = "Employees",
        //             Data = new Person()
        //             {
        //                 Id = Guid.NewGuid(),
        //                 FirstName = $"Firstname {i}",
        //                 LastName = $"Lastname {i}",
        //                 Img = ms.ToArray()
        //             }
        //         };

        //     await DbManager.AddRecord(newRecord);
        //     // AddLine($"add {i}");
        //     StateHasChanged();

        // }

        // AddLine("added");
        // StateHasChanged();



        // var persons = await DbManager.GetRecords<Person>("Employees");
        // AddLine("get all");
        // StateHasChanged();

        AddLine("start get one");
        SearchedPerson = await DbManager.GetRecordById<Guid, Person>("Employees", Guid.Parse(SearchID));
        AddLine("end get one");
        StateHasChanged();


    }
}
